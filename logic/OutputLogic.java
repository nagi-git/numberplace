package logic;

import java.util.Map;

import constants.NumberPlaceConstants;
import entity.Cell;
import enumeration.Number;

/**
 * 数字出力のロジック
 *
 * @author Ryo Ito
 *
 */
public class OutputLogic {
	private static String[][] GRID_LINE =
		{
			{"┏", "━", "┯", "━", "┯", "━", "┳", "━", "┯", "━", "┯", "━", "┳", "━", "┯", "━", "┯", "━", "┓"},
			{"┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃"},
			{"┠", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "┨"},
			{"┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃"},
			{"┠", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "┨"},
			{"┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃"},
			{"┣", "━", "┿", "━", "┿", "━", "╋", "━", "┿", "━", "┿", "━", "╋", "━", "┿", "━", "┿", "━", "┫"},
			{"┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃"},
			{"┠", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "┨"},
			{"┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃"},
			{"┠", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "┨"},
			{"┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃"},
			{"┣", "━", "┿", "━", "┿", "━", "╋", "━", "┿", "━", "┿", "━", "╋", "━", "┿", "━", "┿", "━", "┫"},
			{"┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃"},
			{"┠", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "┨"},
			{"┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃"},
			{"┠", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "╂", "─", "┼", "─", "┼", "─", "┨"},
			{"┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃", "　", "│", "　", "│", "　", "┃"},
			{"┗", "━", "┷", "━", "┷", "━", "┻", "━", "┷", "━", "┷", "━", "┻", "━", "┷", "━", "┷", "━", "┛"},
		};

	private static String[][] GRID_POSSIBILITY_LINE =
		{
			{"╔", "═══", "╤", "═══", "╤", "═══", "╦", "═══", "╤", "═══", "╤", "═══", "╦", "═══", "╤", "═══", "╤", "═══", "╗"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"╟", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╢"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"╟", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╢"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"╠", "═══", "╪", "═══", "╪", "═══", "╬", "═══", "╪", "═══", "╪", "═══", "╬", "═══", "╪", "═══", "╪", "═══", "╣"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"╟", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╢"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"╟", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╢"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"╠", "═══", "╪", "═══", "╪", "═══", "╬", "═══", "╪", "═══", "╪", "═══", "╬", "═══", "╪", "═══", "╪", "═══", "╣"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"╟", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╢"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"╟", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╬", "---", "+", "---", "+", "---", "╢"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║", "   ", "|", "   ", "|", "   ", "║"},
			{"╚", "═══", "╧", "═══", "╧", "═══", "╩", "═══", "╧", "═══", "╧", "═══", "╩", "═══", "╧", "═══", "╧", "═══", "╝"},
		};

	private static String[][] CHARACTER_CONVERTER =
		{
			{ " ", "　", "" },
			{ "1", "１", "①" },
			{ "2", "２", "②" },
			{ "3", "３", "③" },
			{ "4", "４", "④" },
			{ "5", "５", "⑤" },
			{ "6", "６", "⑥" },
			{ "7", "７", "⑦" },
			{ "8", "８", "⑧" },
			{ "9", "９", "⑨" }
		};

	/**
	 * 数字を画面に出力します。
	 *
	 * @param input 入力した数字
	 */
	public void displayNumber(Map<Integer, Cell> cellMap) {
		// 数字を表示
		int index = 0;
		for (String[] a : GRID_LINE) {
			for (String b : a) {
				// １行毎に表示
				if (b != "　") {
					System.out.print(b);
					continue;
				}

				Cell cell = cellMap.get(index);
				Number number = cell.getNumber();
				// 確定している数字がある場合
				if (number != null) {
					if (cell.isNew()) {
						System.out.print(CHARACTER_CONVERTER[number.getNumber()][2]);
						cell.setNew(false);
					} else {
						System.out.print(CHARACTER_CONVERTER[number.getNumber()][1]);
					}
				} else {
					System.out.print(CHARACTER_CONVERTER[0][1]);
				}
				index++;
			}
			// １行毎に改行
			System.out.println();
		}
		// １回毎に改行
		System.out.println();
	}

	/**
	 * 数字が入る可能性を画面に出力します。
	 *
	 * @param input 入力した数字
	 */
	public void displayPossibility(Map<Integer, Cell> cellMap) {
		// 可能性を表示
		int index = 0;
//		int row = index / NumberPlaceConstants.CELL_NUMBER;
		int row = 0;
		for (String[] a : GRID_POSSIBILITY_LINE) {
			int mod = row % (NumberPlaceConstants.BLOCK_NUMBER + 1);
			for (String b : a) {
				// １行毎に表示
				if (b != "   ") {
					System.out.print(b);
					continue;
				}
				Cell cell = cellMap.get(index);
				Number number = cell.getNumber();
				// 確定している数字がある場合
				if (number != null) {
					index++;
					System.out.print(b);
					continue;
				}

				for (int i = mod * NumberPlaceConstants.BLOCK_NUMBER - 2;
						i <= mod * NumberPlaceConstants.BLOCK_NUMBER; i++) {
					boolean possibility = cell.getPossibility(Number.of(i));
					if (possibility) {
						System.out.print(CHARACTER_CONVERTER[i][0]);
					} else {
						System.out.print(CHARACTER_CONVERTER[0][0]);
					}
				}
				index++;
			}
			// １行毎に改行
			System.out.println();
			if (mod != 0 && mod < NumberPlaceConstants.BLOCK_NUMBER) {
				index -= NumberPlaceConstants.CELL_NUMBER;
			}
			row++;
		}
		// １回毎に改行
		System.out.println();
	}

}
